
// See note in rf24Handshaking about address selection
//

// Channel and address allocation:
// Oliver and Hessa:  Channel 50, addr = 0x7C
const byte addr = 0x7C; // change as per the above assignment
const int RF24_CHANNEL_NUMBER = 50; // change as per the above assignment

// Do not make changes here
const byte xmtrAddress[] = { addr, addr, 0xC7, 0xE6, 0xCC };
const byte rcvrAddress[] = { addr, addr, 0xC7, 0xE6, 0x66 };

const int RF24_POWER_LEVEL = RF24_PA_LOW;

// global variables
uint8_t pipeNum;
unsigned int totalTransmitFailures = 0;

struct DataStruct {
  uint8_t selectorBits;
};
DataStruct data;

void setupRF24Common() {

  // RF24 setup
  if (!radio.begin()) {
    Serial.println("radio  initialization failed");
    while (1)
      ;
  } else {
    Serial.println("radio successfully initialized");
  }

  radio.setDataRate(RF24_250KBPS);
  radio.setChannel(RF24_CHANNEL_NUMBER);
  radio.setPALevel(RF24_POWER_LEVEL);
}

void rf24SendData() {

  // The write() function will block
  // until the message is successfully acknowledged by the receiver
  // or the timeout/retransmit maxima are reached.
  int retval = radio.write(&data, sizeof(data));

  Serial.print("Sending data = ");
  Serial.print(data.selectorBits);
  Serial.print(" ... ");
  if (retval) {
    Serial.println("success");

  } else {
    totalTransmitFailures++;
    Serial.print("failure, total failures = ");
    Serial.println(totalTransmitFailures);
  }
}

// Receiver Code
// Additional libraries for receiver
#include <Adafruit_VS1053.h>
#include <SD.h>
#include <Servo.h>
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif
// Additional pin usage for receiver
// Adafruit music maker shield
#define SHIELD_RESET -1  // VS1053 reset pin (unused!)
#define SHIELD_CS 7      // VS1053 chip select pin (output)
#define SHIELD_DCS 6     // VS1053 Data/command select pin (output)
#define CARDCS 4         // Card chip select pin
// DREQ should be an Int pin, see http://arduino.cc/en/Reference/attachInterrupt
#define DREQ 3  // VS1053 Data request, ideally an Interrupt pin
Adafruit_VS1053_FilePlayer musicPlayer = Adafruit_VS1053_FilePlayer(SHIELD_RESET, SHIELD_CS, SHIELD_DCS, DREQ, CARDCS);
// Servo motors
const int SERVO0PIN = A1;
const int SERVO1PIN = A2;
const int SERVO2PIN = A3;
const int SERVO3PIN = A4;
// Neopixel
#define NEOPIXELPIN A5
#define NUMPIXELS 130  // change to fit
Adafruit_NeoPixel pixels(NUMPIXELS, NEOPIXELPIN, NEO_GRB + NEO_KHZ800);
  // change names to describe what's moving
Servo myservo1;
Servo myservo2;
Servo myservo3;
Servo myservo4;
// change as per your robot
const int SERVO0NEUTRALPOSITION = 45;
const int SERVO1NEUTRALPOSITION = 90;
const int SERVO2NEUTRALPOSITION = 0;
const int SERVO3NEUTRALPOSITION = 180;
const int SERVO4NEUTRALPOSITION = 180;
int pos = 0;
int i = 0;
const char string_1[] PROGMEM = "1.mp3";
const char string_2[] PROGMEM = "2.mp3";
const char string_3[] PROGMEM = "3.mp3";
const char string_4[] PROGMEM = "4.mp3";
const char string_5[] PROGMEM = "5.mp3";
const char string_6[] PROGMEM = "6.mp3";
const char string_7[] PROGMEM = "7.mp3";
const char string_8[] PROGMEM = "8.mp3";
const char string_9[] PROGMEM = "9.mp3";
const char string_10[] PROGMEM = "10.mp3";
const char string_11[] PROGMEM = "11.mp3";
PGM_P const AudioClips[] PROGMEM =
{
    string_1,
    string_2,
    string_3,
    string_4,
    string_5,
    string_6,
    string_7,
    string_8,
    string_9,
    string_10,
    string_11
};
void setup() {
  Serial.begin(9600);
  //printf_begin();
  // Set up all the attached hardware
  setupMusicMakerShield();
  setupServoMotors();
  setupNeoPixels();
  setupRF24();
  // Brief flash to show we're done with setup()
  flashNeoPixels();
}
void setupRF24() {
  setupRF24Common();
  // Set us as a receiver
  radio.openWritingPipe(rcvrAddress);
  radio.openReadingPipe(1, xmtrAddress);
  radio.printPrettyDetails();
  Serial.println("I am a receiver");
}
void setupMusicMakerShield() {
  if (!musicPlayer.begin()) {  // initialise the music player
    Serial.println(F("Couldn't find VS1053, do you have the right pins defined?"));
    while (1)
      ;
  }
  Serial.println(F("VS1053 found"));
  if (!SD.begin(CARDCS)) {
    Serial.println(F("SD card failed or not present"));
    while (1)
      ;  // don't do anything more
  }
  // Set volume for left, right channels. lower numbers == louder volume!
  musicPlayer.setVolume(1, 1);
  // Timer interrupts are not suggested, better to use DREQ interrupt!
  //musicPlayer.useInterrupt(VS1053_FILEPLAYER_TIMER0_INT); // timer int
  // If DREQ is on an interrupt pin (on uno, #2 or #3) we can do background
  // audio playing
  musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT);  // DREQ int
}

void setupServoMotors() {
  myservo4.attach(A4);  // attaches the servo on pin 9 to the servo object
  myservo3.attach(A3);
  myservo2.attach(A2);
  myservo1.attach(A1);
}

void setupNeoPixels() {
  pixels.begin();
  pixels.clear();
  pixels.show();
}
void flashNeoPixels() {
  // all on
  for (int i = 0; i < NUMPIXELS; i++) {  // For each pixel...
    pixels.setPixelColor(i, pixels.Color(0, 100, 0));
  }
  pixels.show();
  delay(500);
  
  // all off
  pixels.clear();
  pixels.show();
}
void loop() {
  char buffer[strlen_P(AudioClips[i])];
  strcpy_P(buffer, (PGM_P)pgm_read_word(&AudioClips[i]));
  // If there is data, read it,
  // and do the needfull
  // Become a receiver
  radio.startListening();
  if (radio.available(&pipeNum)) {
    radio.read(&data, sizeof(data));
    Serial.print("message received Data = ");
    Serial.println(data.selectorBits);
    switch (data.selectorBits) {
      case 1://default
        original();
        face();
        break;
      case 3:
        if (musicPlayer.stopped()) {
          // Non-blocking
          //Serial.print(F("Playing track"));
           Serial.print('[');
       //   Serial.print(AudioClips[i]);
          Serial.print(buffer);
           Serial.println(']');
          int retval = musicPlayer.startPlayingFile("/1.mp3");
          Serial.print("retval = ");
           Serial.println(retval);
        } else {
          Serial.println(F("Playing in progress, ignoring"));
        }
        i+=1;
        break;
      case 5:
        i-=1;
        //char buffer[strlen_P(AudioClips[i])];
        
        Serial.println(buffer);
        // Don't play if it's already playing
        if (musicPlayer.stopped()) {
          // Non-blocking
          //Serial.println(F("Playing track -1"));
          musicPlayer.startPlayingFile(buffer);
        } else {
          Serial.println(F("Playing in progress, ignoring"));
        }
        break;
      case 7:
        sad();
        break;
      case 9:
        cry();
        break;
      case 11:
        greeting();
        break;
      case 13:
        up();
        break;
      case 15:
        cry();
        crying();
        break;
      default:
        Serial.println("Invalid option");
    }
  }
}
void greeting() {
    for (pos = 30; pos <= 150; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo4.write(pos);              // tell servo to go to position in variable 'pos'
    myservo3.write(pos);
    delay(15);                       // waits 15 ms for the servo to reach the position
  }
  for (pos = 150; pos >= 30; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo4.write(pos);              // tell servo to go to position in variable 'pos'
    myservo3.write(pos);
    delay(15);                       // waits 15 ms for the servo to reach the position
  }
}

void up(){
  for (pos = 170; pos >= 30; pos -= 1) {
  myservo1.write(pos);
  myservo2.write(pos);
  delay(15);
  }
  for (pos = 30; pos <= 170; pos += 1) {
  myservo3.write(pos);
  myservo4.write(pos);
  delay(15);
  }
}

void sad(){
  for (pos = 30; pos <= 170; pos += 1) {
  myservo3.write(pos);
  myservo4.write(pos);
  delay(15);
  }
  for (pos = 170; pos >= 100; pos -= 1) {
    myservo3.write(pos);
  myservo4.write(pos);
  delay(15);
  }
}

void original(){
  myservo1.write(170);
  myservo2.write(170);
  myservo3.write(30);
  myservo4.write(30);
}

void crying(){
  for (pos = 50; pos <= 120; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo1.write(pos);              // tell servo to go to position in variable 'pos'
    myservo2.write(pos);
    myservo3.write(170-pos);              // tell servo to go to position in variable 'pos'
    myservo4.write(170-pos);
    delay(15);
  }
  for (pos = 120; pos >= 50; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo1.write(pos);              // tell servo to go to position in variable 'pos'
    myservo2.write(pos);
    myservo3.write(170-pos);              // tell servo to go to position in variable 'pos'
    myservo4.write(170-pos);
    delay(15);                       // waits 15 ms for the servo to reach the position
  }  
}

void face(){
  //eyes;
  pixels.setPixelColor(0, pixels.Color(0, 0, 150));
  pixels.setPixelColor(1, pixels.Color(0, 0, 150));
  pixels.setPixelColor(24, pixels.Color(0, 0, 150));
  pixels.setPixelColor(25, pixels.Color(0, 0, 150));
  pixels.setPixelColor(26, pixels.Color(0, 0, 150));
  pixels.setPixelColor(27, pixels.Color(0, 0, 150));
  pixels.setPixelColor(50, pixels.Color(0, 0, 150));
  //pixels.setPixelColor(40, pixels.Color(0, 0, 150));
  pixels.setPixelColor(51, pixels.Color(0, 0, 150));
  pixels.setPixelColor(78, pixels.Color(0, 0, 150));
  pixels.setPixelColor(79, pixels.Color(0, 0, 150));
  pixels.setPixelColor(102, pixels.Color(0, 0, 150));
  pixels.setPixelColor(103, pixels.Color(0, 0, 150));
  pixels.setPixelColor(104, pixels.Color(0, 0, 150));
  pixels.setPixelColor(105, pixels.Color(0, 0, 150));
   pixels.setPixelColor(128, pixels.Color(0, 0, 150));
  pixels.setPixelColor(129, pixels.Color(0, 0, 150));
  //mouth;
  pixels.setPixelColor(35, pixels.Color(0, 0, 150));
  pixels.setPixelColor(43, pixels.Color(0, 0, 150));
  pixels.setPixelColor(59, pixels.Color(0, 0, 150));
  pixels.setPixelColor(70, pixels.Color(0, 0, 150));
   pixels.setPixelColor(86, pixels.Color(0, 0, 150));
  pixels.setPixelColor(94, pixels.Color(0, 0, 150));
  pixels.show();
}// end of loop()
void tears(int x,int y,int Blue){
    pixels.setPixelColor(13*x-y, pixels.Color(0, 0, Blue));
    pixels.setPixelColor(13*x+(y-1), pixels.Color(0, 0, Blue));
    pixels.setPixelColor(13*(x+6)-y, pixels.Color(0, 0, Blue));
    pixels.setPixelColor(13*(x+6)+(y-1), pixels.Color(0, 0, Blue));
  }

void cry(){
   //eyes;
  pixels.setPixelColor(0, pixels.Color(0, 0, 150));
  pixels.setPixelColor(1, pixels.Color(0, 0, 150));
  pixels.setPixelColor(24, pixels.Color(0, 0, 150));
  pixels.setPixelColor(25, pixels.Color(0, 0, 150));
  pixels.setPixelColor(26, pixels.Color(0, 0, 150));
  pixels.setPixelColor(27, pixels.Color(0, 0, 150));
  pixels.setPixelColor(50, pixels.Color(0, 0, 150));
  //pixels.setPixelColor(40, pixels.Color(0, 0, 150));
  pixels.setPixelColor(51, pixels.Color(0, 0, 150));
  pixels.setPixelColor(78, pixels.Color(0, 0, 150));
  pixels.setPixelColor(79, pixels.Color(0, 0, 150));
  pixels.setPixelColor(102, pixels.Color(0, 0, 150));
  pixels.setPixelColor(103, pixels.Color(0, 0, 150));
  pixels.setPixelColor(104, pixels.Color(0, 0, 150));
  pixels.setPixelColor(105, pixels.Color(0, 0, 150));
   pixels.setPixelColor(128, pixels.Color(0, 0, 150));
  pixels.setPixelColor(129, pixels.Color(0, 0, 150));
  
  //mouth;
 // pixels.setPixelColor(35, pixels.Color(0, 0, 150));
  pixels.setPixelColor(43, pixels.Color(0, 0, 150));
  pixels.setPixelColor(59, pixels.Color(0, 0, 150));
  pixels.setPixelColor(70, pixels.Color(0, 0, 150));
   pixels.setPixelColor(86, pixels.Color(0, 0, 150));
 // pixels.setPixelColor(94, pixels.Color(0, 0, 150));
  pixels.show();
  
  //tears;
  for (int i=3; i<14; i++){
    tears(2,i,150);
    pixels.show();
    delay(100);
  }
  for (int i=3; i<14; i++){
    tears(2,i,0);
    pixels.show();
    delay(100);
  }
}
// end of receiver code
